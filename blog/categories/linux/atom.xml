<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | Cloud Memo]]></title>
  <link href="http://takekazuomi.github.com/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://takekazuomi.github.com/"/>
  <updated>2012-12-26T23:28:49+09:00</updated>
  <id>http://takekazuomi.github.com/</id>
  <author>
    <name><![CDATA[Takekazu Omi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Azure Virtual MachineのDISK性能]]></title>
    <link href="http://takekazuomi.github.com/blog/2012/12/23/azurevmfix1221/"/>
    <updated>2012-12-23T18:40:00+09:00</updated>
    <id>http://takekazuomi.github.com/blog/2012/12/23/azurevmfix1221</id>
    <content type="html"><![CDATA[<p>twitterで、「<a href="https://twitter.com/kamebuchi/status/282094138269261825">Azure VMのLinuxを21日以降作るか、更新手順を実施するとパフォーマンスが改善されるらしー</a>」というのを読んで、以前DISK性能を調べ始めてそのまま放置していたのを思い出した。<a href="http://www.slideshare.net/takekazuomi/azure-ubuntu-1204-iozone" title="Azure Ubuntu 12.04 iozone 速報 2012/7/4">Azure Ubuntu 12.04 iozone 速報 2012/7/4</a></p>

<p>Azure Storageの非同期と同期の比較をしようと始めたのだけど、なかなか手間取って進まない。ちょっと寄り道して速くなったというAzure VMを試してみることにした。</p>

<p>前のVMは消してしまったので、新たにインストールし直すところから始める。AzureのポータルからUbuntuをインストールして、DataDiskを接続するあたりまでは他に任せてubuntuが起動した後から書いていきます。</p>

<p><a href="http://www.flickr.com/photos/takekazuomi/7987640250/" title="Triangle by takekazu, on Flickr"><img src="http://farm9.staticflickr.com/8450/7987640250_b87fdcf1f1_c.jpg" width="800" height="534" alt="Triangle"></a></p>

<hr />

<h1>Ubuntu 環境の準備</h1>

<p>基本的には、前回と同じになるようにします。だたUbuntuを12.10にして、data diskのホストキャッシュの設定を変えて3つのDISKを接続して測定しました。<a href="http://www.slideshare.net/takekazuomi/azure-ubuntu-1204-iozone" title="Azure Ubuntu 12.04 iozone 速報 2012/7/4">以前の測定</a>の時は、ホストキャッシュの設定はポータルからはできずに、デフォルトでした。
その時(2012/7/4)は、ホストキャッシュ無しがデフォルトだったと思うのですが、ちょっとドキュメントが見つからないので前の結果は参考程度にしてください。</p>

<p>Azure iDC は、West USで、2 coreのインスタンス（M）を使いました。Sにするか少し考えたのですが、クラウドサービスについては、I/O パフォーマンスがXS、Sでは制限されている、参考：<a href="http://www.windowsazure.com/ja-jp/pricing/details/">Windows Azure の料金と、請求の計測単位の詳細</a>ようなのでMを使うことにしました。</p>

<p>正確には、今回試そうとしているVirtual Machine はまだ Previewで Cloud Serviceと同じような制限になるかは情報が公開されていない（私は知らないだけかもしれませんが）のですが、同じになってそうな気がしたのでMにしました。</p>

<p>ちょっと古いものでは、<a href="http://msdn.microsoft.com/ja-jp/library/windowsazure/ee814754.aspx">仮想マシンのサイズの構成方法</a> という情報もあります。</p>

<p>インスタンスの選択で考慮する必要があると思われるのは、Data Diskはネットワーク経由で接続される、ソフトウェアで処理する部分が多い＝CPUを使うということです。従ってネットワーク帯域制限やCore数の影響を無視できないはずです。XSやSのインスタンスだと何を測定しているのか不安になる気がしたのでMを選択しました。
実際どのインスタンスサイズの程度影響があるのかは興味ありますが未測定です。</p>

<p>ざっと流すと、以下のような手順踏んで用意をします。</p>

<ol>
<li>Ubuntu 12.10 を、azure portalから、virtual machineイメージをインストール</li>
<li>data disk を、256Gで3つ作成、/dev/sdc, sdd, sdeを確認、キャッシュをそれぞれ「なし、読み取り専用、読み取り/書き込み」と指定</li>
<li>fdiskして、/dev/sd[cde]1にext4でfilesystemを作成し/mnt/data, /mnt/data1, /mnt/data2へmount</li>
<li>apt-get update, upgrade して最新に更新</li>
<li>/etc/apt/sources.list で、multiverse を追加（コメントを外しただけ）</li>
<li>apt-get install iozone3 でインストール</li>
</ol>


<h3>ディスク構成</h3>

<table width="80%" border="1">
    <thead>
    <tr>
    <th>ディスク</th>
    <th>種類           </th>
    <th>ホスト キャッシュ </th>
    <th>サイズ</th>
    <th>備考</th>
    </tr>
    </thead>
    <tbody>
    <tr>
    <td>/dev/sda</td>
    <td>OS ディスク    </td>
    <td>読み取り/書き込み </td>
    <td>30GB  </td>
    <td></td>
    </tr>
    <tr>
    <td>/dev/sdc</td>
    <td>データ ディスク</td>
    <td>なし              </td>
    <td>256GB </td>
    <td></td>
    </tr>
    <tr>
    <td>/dev/sdd</td>
    <td>データ ディスク</td>
    <td>読み取り専用      </td>
    <td>256GB </td>
    <td></td>
    </tr>
    <tr>
    <td>/dev/sde</td>
    <td>データ ディスク</td>
    <td>読み取り/書き込み </td>
    <td>256GB </td>
    <td></td>
    </tr>
    </tbody>
</table>


<hr />

<h2>コマンドライン</h2>

<p>今後の再テストのためのメモも兼ねて、コマンドをラインに流したもの抜粋を挙げておきます。
(以下sudo省略)</p>

<ul>
<li>ポータルで256Gでdata diskを作成して接続を確認</li>
</ul>


<p><code>
$ dmesg | grep -e "\[sd[a-z]\]"
sd 2:0:0:0: [sda] 62914560 512-byte logical blocks: (32.2 GB/30.0 GiB)
sd 2:0:0:0: [sda] Write Protect is off
sd 2:0:0:0: [sda] Mode Sense: 0f 00 10 00
sd 2:0:0:0: [sda] Write cache: enabled, read cache: enabled, supports DPO and FUA
sd 2:0:0:0: [sda] Attached SCSI disk
sd 3:0:1:0: [sdb] 283115520 512-byte logical blocks: (144 GB/135 GiB)
sd 3:0:1:0: [sdb] Write Protect is off
sd 3:0:1:0: [sdb] Mode Sense: 0f 00 10 00
sd 3:0:1:0: [sdb] Write cache: enabled, read cache: enabled, supports DPO and FUA
sd 3:0:1:0: [sdb] Attached SCSI disk
sd 6:0:0:0: [sdc] 536870912 512-byte logical blocks: (274 GB/256 GiB)
sd 6:0:0:0: [sdc] Write Protect is off
sd 6:0:0:0: [sdc] Mode Sense: 0f 00 10 00
sd 6:0:0:0: [sdc] Write cache: enabled, read cache: enabled, supports DPO and FUA
sd 6:0:0:0: [sdc] Attached SCSI disk
sd 6:0:0:1: [sdd] 536870912 512-byte logical blocks: (274 GB/256 GiB)
sd 6:0:0:1: [sdd] Write Protect is off
sd 6:0:0:1: [sdd] Mode Sense: 0f 00 10 00
sd 6:0:0:1: [sdd] Write cache: enabled, read cache: enabled, supports DPO and FUA
sd 6:0:0:1: [sdd] Attached SCSI disk
sd 6:0:0:2: [sde] 536870912 512-byte logical blocks: (274 GB/256 GiB)
sd 6:0:0:2: [sde] Write Protect is off
sd 6:0:0:2: [sde] Mode Sense: 0f 00 10 00
sd 6:0:0:2: [sde] Write cache: enabled, read cache: enabled, supports DPO and FUA
sd 6:0:0:2: [sde] Attached SCSI disk
</code></p>

<ul>
<li>parted で全セクタを使ってパーテーションを作成</li>
</ul>


<p>```
$ sudo parted /dev/sdc --script mklabel gpt
$ sudo parted /dev/sdc --script 'mkpart disk1 ext4 1M -1'
$ sudo parted /dev/sdc --script 'print'</p>

<p>Model: Msft Virtual Disk (scsi)
Disk /dev/sdc: 275GB
Sector size (logical/physical): 512B/512B
Partition Table: gpt</p>

<p>Number  Start   End    Size   File system  Name   Flags
 1      1049kB  275GB  275GB  ext4         disk1</p>

<p>$ sudo parted /dev/sdd --script mklabel gpt
$ sudo parted /dev/sdd --script 'mkpart disk2 ext4 1M -1'
$ sudo parted /dev/sdd --script 'print'</p>

<p>... snip ...</p>

<p>$ sudo parted /dev/sde --script mklabel gpt
$ sudo parted /dev/sde --script 'mkpart disk3 ext4 1M -1'
$ sudo parted /dev/sde --script 'print'</p>

<p>... snip ...</p>

<p>$ sudo mkfs.ext4 /dev/sdc1
... snip ...
$ sudo mkfs.ext4 /dev/sdd1
... snip ...
$ sudo mkfs.ext4 /dev/sde1
... snip ...
```</p>

<ul>
<li>mount point 作って、/mnt/resouceとともにパーミッションを変更</li>
</ul>


<p>```
$ mkdir /mnt/data1 /mnt/data2 /mnt/data3
$ chmod a+wrx /mnt/data*
$ chmod a+wrx /mnt/resource
$ ls -l /mnt/
total 20
drwx------ 3 root root 4096 Dec 21 15:56 cdrom
drwxrwxrwx 2 root root 4096 Dec 22 21:04 data1
drwxrwxrwx 2 root root 4096 Dec 22 21:04 data2
drwxrwxrwx 2 root root 4096 Dec 22 22:47 data3
drwxrwxrwx 4 root root 4096 Dec 21 22:14 resource</p>

<p>```</p>

<ul>
<li>とりあえず、マウントして確認</li>
</ul>


<p>```
$ sudo mount -t ext4 /dev/sdc1 /mnt/data1
$ sudo mount -t ext4 /dev/sdd1 /mnt/data2
$ sudo mount -t ext4 /dev/sde1 /mnt/data3</p>

<p>$ df -T
Filesystem     Type     1K-blocks    Used Available Use% Mounted on
/dev/sda1      ext4      30953664 1142056  28539332   4% /
udev           devtmpfs   1751196      12   1751184   1% /dev
tmpfs          tmpfs       704872     280    704592   1% /run
none           tmpfs         5120       0      5120   0% /run/lock
none           tmpfs      1762172       0   1762172   0% /run/shm
none           tmpfs       102400       0    102400   0% /run/user
/dev/sdb1      ext4     139334632  192000 132064848   1% /mnt/resource
/dev/sdc1      ext4     264221700  191576 250608456   1% /mnt/data1
/dev/sdd1      ext4     264221700  191576 250608456   1% /mnt/data2
/dev/sde1      ext4     264221700  191576 250608456   1% /mnt/data3
```</p>

<ul>
<li>再起動してもマウントされるように、UUIDを確認して /etc/fstab に追加。</li>
</ul>


<p>```
$ blkid
/dev/sda1: LABEL="cloudimg-rootfs" UUID="56d8a977-c1fe-461e-a328-b19fc47c743f" TYPE="ext4"
/dev/sdb1: UUID="d063d8a2-32fc-486c-a9b4-e6bcf7e5deae" TYPE="ext4"
/dev/sdd1: UUID="88f28b19-fdc6-46dc-a2d7-2daa1754754f" TYPE="ext4"
/dev/sdc1: UUID="a1cb5045-178a-476e-9821-084f8f6d92a6" TYPE="ext4"
/dev/sde1: UUID="15b8b45e-fbd0-4efc-9534-5e38b1877828" TYPE="ext4"</p>

<p>$ vi /etc/fstab</p>

<p>... snip ...</p>

<p>$ cat /etc/fstab
UUID=56d8a977-c1fe-461e-a328-b19fc47c743f       /        ext4   defaults        0 0
UUID=a1cb5045-178a-476e-9821-084f8f6d92a6       /mnt/data1        ext4   defaults        0 0
UUID=88f28b19-fdc6-46dc-a2d7-2daa1754754f       /mnt/data2        ext4   defaults        0 0
UUID=15b8b45e-fbd0-4efc-9534-5e38b1877828       /mnt/data3        ext4   defaults        0 0</p>

<p>```</p>

<ul>
<li>最新にして再起動する</li>
</ul>


<p>```
$ apt-get update</p>

<p>... snip ...</p>

<p>$ apt-get upgrade</p>

<p>... snip ...</p>

<p>$ shutdown -r now</p>

<p>```</p>

<ul>
<li>iozone3 を入れる</li>
</ul>


<p>/etc/apt/sources.list を変更して、multiverse を追加（コメントを外しただけ）</p>

<p>```
$ vi /etc/apt/sources.list</p>

<p>... snip ...</p>

<p>$ apt-get update
$ apt-get install iozone3
```</p>

<hr />

<h1>測定</h1>

<p>これで環境が出来たので測定します。基本的には、iozone 一発で細かいオプションの指定はしません。なんとなく、Excelファイルにしたのですが、面倒になるだけであまりメリットは無かったかもしれません。もし再試験してもらえるなら</p>

<p><code>
iozone -Ra -f /mnt/resource/tmp/test -b sdb2-001.xls -s 1g
iozone -Ra -f /mnt/data1/tmp/test -b sdc1-001hcnone.xls -s 1g
iozone -Ra -f /mnt/data2/tmp/test -b sdd1-001hcro.xls -s 1g
iozone -Ra -f /mnt/data3/tmp/test -b sde1-001hcrw.xls -s 1g
</code></p>

<p><a href="/files/2012_12/20121222-iozone-azurevm.zip">結果データ</a></p>

<h2>iozone の実行結果</h2>

<p>iozoneの測定結果をローカルドライブ、Data Diskの順で見ていく。それぞれの結果を図にした。</p>

<h3>ローカルディスクの性能</h3>

<p>まずは、ローカルドライブの実行結果から見る。読み込みはレコードサイズが8Kあたりから256KBまでは、2,500,000 KB/sec  - 3,000,000 KB/sec で、レコードサイズが増えていくとだんだん遅くなっていく。書き込み側は同じ軸ではとスケールが違い過ぎてよくわからない。</p>

<ul>
<li>図1 /dev/sdb2 ローカルドライブ 2012/12/22 測定
<img src="/images/2012_12/sdb2-rw.png" title="図1 /dev/sdb2 ローカルドライブ 2012/12/22 測定 " alt="図1 /dev/sdb2 ローカルドライブ 2012/12/22 測定" /></li>
</ul>


<p>そこで、書き込みの系統だけを表示させた。Record Rewriteの結果が桁外れに速い。これは<a href="http://www.iozone.org/docs/IOzone_msword_98.pdf" title="Iozone Filesystem Benchmark Download Documentation">ドキュメント</a>によると、同じ内容を繰り返し書き込むテストということなのでキャッシュの効果だろうと思われる。</p>

<ul>
<li>図1-1 /dev/sdb2 ローカルドライブ 書き込みのみ表示(1) 2012/12/22 測定
<img src="/images/2012_12/sdb2-note1-w.png" title="図1-1 /dev/sdb2 ローカルドライブ 書き込みのみ表示(1) 2012/12/22 測定" alt="図1-1 /dev/sdb2 ローカルドライブ 書き込みのみ表示(1) 2012/12/22 測定" /></li>
</ul>


<p>さらによく見ると、同じ再書き込みでも、Rewrite、Recoed Rewrite、Refwriteの違いがなかなか興味深い。Recoed Rewriteだけがリード並に桁外れに速い。Rewrite、Refwriteはファイル単位の再書き込みで、Recoed Rewriteは特定レコードの再書き込み（<a href="http://www.iozone.org/docs/IOzone_msword_98.pdf" title="Iozone Filesystem Benchmark Download Documentation">ドキュメント</a>から）ということなので、キャッシュが利く場合は限定されてるらしいことがわかる。
同じものを繰り返し書き込むというのは、現実にはあまり無いことなので、Rewriteをグラフから外して、書き込みのパフォーマンスを見やすくてみる。</p>

<ul>
<li>図2 /dev/sdb2 ローカルドライブ  書き込みのみ表示(2) 2012/12/22 測定
<img src="/images/2012_12/sdb2-w.png" title="図2 /dev/sdb2 ローカルドライブ  書き込みのみ表示(2) 2012/12/22 測定 " alt="図2 /dev/sdb2 ローカルドライブ  書き込みのみ表示(2) 2012/12/22 測定" /></li>
</ul>


<p>小さいブロックのランダム書き込みが苦手だということがわかる。これはHDDの一般的な傾向で納得できる。以降では書き込みの図は図2と同じデータ項目を表示する。</p>

<h3>Data Diskの性能</h3>

<p>話題のData Diskの性能に入る。ローカルドライ比較で、読み込みはほぼ同等な性能だったが、書き込みは半分程度の性能しか出ていない。
ホストキャッシュの設定で大きな違いが出ることを期待したが図を見る限りでは顕著な違いというほどには違いは無かった。</p>

<ul>
<li><p>図3 /dev/sdc1 ホストキャッシュなし 2012/12/22 測定
<img src="/images/2012_12/sdc1-rw.png" title="図3 /dev/sdc1 ホストキャッシュなし 2012/12/22 測定 " alt="図3 /dev/sdc1 ホストキャッシュなし 2012/12/22 測定 " /></p></li>
<li><p>図4 /dev/sdc1 ホストキャッシュなし 2012/12/22 書き込みのみ表示  測定
<img src="/images/2012_12/sdc1-w.png" title="図4 /dev/sdc1 ホストキャッシュなし 2012/12/22 書き込みのみ表示  測定" alt="図4 /dev/sdc1 ホストキャッシュなし 2012/12/22 書き込みのみ表示  測定 " /></p></li>
<li><p>図5 /dev/sdd1 ホストキャッシュ 読み取り専用 2012/12/22 測定
<img src="/images/2012_12/sdd1-rw.png" title="図5 /dev/sdd1 ホストキャッシュ 読み取り専用 2012/12/22 測定 " alt="図5 /dev/sdd1 ホストキャッシュ 読み取り専用 2012/12/22 測定 " /></p></li>
<li><p>図6 /dev/sdd1 ホストキャッシュ 読み取り専用 書き込みのみ表示 2012/12/22 測定
<img src="/images/2012_12/sdd1-w.png" title="図6 /dev/sdd1 ホストキャッシュ 読み取り専用 書き込みのみ表示 2012/12/22 測定 " alt="図6 /dev/sdd1 ホストキャッシュ 読み取り専用 書き込みのみ表示 2012/12/22 測定 " /></p></li>
<li><p>図7 /dev/sde1 ホストキャッシュ 読み取り/書き込み 2012/12/22 測定
<img src="/images/2012_12/sde1-rw.png" title="図7 /dev/sde1 ホストキャッシュ 読み取り/書き込み 2012/12/22 測定 " alt="図7 /dev/sde1 ホストキャッシュ 読み取り/書き込み 2012/12/22 測定 " /></p></li>
<li><p>図8 /dev/sde1 ホストキャッシュ 読み取り/書き込み 書き込みのみ表示 2012/12/22 測定
<img src="/images/2012_12/sde1-w.png" title=" 図8 /dev/sde1 ホストキャッシュ 読み取り/書き込み 書き込みのみ表示 2012/12/22 測定 " alt="図8 /dev/sde1 ホストキャッシュ 読み取り/書き込み 書き込みのみ表示 2012/12/22 測定 " /></p></li>
</ul>


<hr />

<h1>結論</h1>

<p>iozoneという選択肢がどうだったのかという気もしてるが、なかなか調子が良い。最初にパフォーマンス向上的な話ではなじめたが、7/4の結果に比べて劇的に変わっているという気はしない。
もう少しデータを精査する必要を感じるが、思ったより長くなりすぎたので、また別の方法を絡めて再考してみようと思う。</p>

<p>今回、テスト自体は一回しか走らせていないので再試験して結果を公開してもらえるとみんなの役に立つも思います。今まで、Azure Tableの性能評価をしたこともありましたが、何度か走らせると結果が違ったり、いつの間にかパフォーマンスが改善されたりなどすることがありました。
いろいろなパターンの性能情報があると設計が楽になり精度もあがりますし。</p>

<h1>Bookmarks</h1>

<ul>
<li><a href="http://www.iozone.org/" title="Iozone Filesystem Benchmark">Iozone Filesystem Benchmark</a></li>
<li><a href="http://www.iozone.org/docs/IOzone_msword_98.pdf" title="Iozone Filesystem Benchmark Download Documentation">Iozone Filesystem Benchmark Download Documentation</a></li>
<li><a href="http://sourceforge.jp/magazine/08/09/05/0759223" title="IOzoneによるファイルシステムのパフォーマンス測定">IOzoneによるファイルシステムのパフォーマンス測定</a></li>
<li><a href="http://www.slideshare.net/takekazuomi/azure-ubuntu-1204-iozone" title="Azure Ubuntu 12.04 iozone 速報 2012/7/4">Azure Ubuntu 12.04 iozone 速報 2012/7/4</a></li>
</ul>


<hr />
]]></content>
  </entry>
  
</feed>
