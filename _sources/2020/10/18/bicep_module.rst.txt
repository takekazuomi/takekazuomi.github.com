bicep moduleを使う
===================

最近、`bicep <https://github.com/Azure/bicep/blob/main/docs/spec/modules.md>`_ が気に入って使ってる。まだ、かなり初期段階の開発中のプロダクトだが、ARM Template のファイルを生成するので、記述ツールという位置付なら今でも十分便利に使える。

先日、`vscode-remote-try-bicep <https://github.com/Azure/vscode-remote-try-bicep>`_ がいつまでも空のままなので `vs code dev container <https://code.visualstudio.com/docs/remote/containers>`_ のテンプレートとして `devcontainer-bicep <https://github.com/takekazuomi/devcontainer-bicep>`_ を作って公開した。個人の嗜好の部分をどこまで入れるのかは微妙な感じではある。

.. image:: https://live.staticflickr.com/65535/49997998651_756352fee6_c.jpg
   :target: https://www.flickr.com/photos/takekazuomi/49997998651/in/datetaken/
   :alt: Stone
   :align: center

話がズレた、10/16に、masterに、0.2でリリースされる予定の **bicep module** [#ref1]_ がマージされたので動かしてみた。まだリリースされてないのでソースを持ってきてビルドして、path の切れてるディレクトリにリンクを張リ、実行属性を付ける。最後に、versionを確認。2020/10/17 時点では、**0.1.149-alpha (1ca02b52de)**  だった。ビルドは、こんな感じのコマンドになる。

.. code:: shell

    % git clone git@github.com:Azure/bicep.git
    % cd bicep/src/Bicep.Cli
    % dotnet publish -r linux-x64 -c Release --self-contained true /p:PublishTrimmed=true -p:PublishReadyToRun=true -p:PublishSingleFile=true -p:PublishReadyToRunShowWarnings=true
    % ln -s $PWD/bin/Release/netcoreapp3.1/linux-x64/publish/bicep ~/.local/bin/bicep
    % chmod +x ~/.local/bin/bicep
    % bicep --version
    Bicep CLI version 0.1.149-alpha (1ca02b52de)

ビルド後の **bicep** サイズを見たら、74MBほどある。今のリリースが45MBなのでちょっとでかい。

`.github/workflows/build.yml <https://github.com/Azure/bicep/blob/401534d6c5c110d6a575755cca5dbf443c5beeb3/.github/workflows/build.yml#L67>`_ を見たら、`PublishReadyToRun` が指定されていなかったので外してみる。

.. code:: yaml

    run: dotnet publish --configuration ${{ matrix.configuration }} --self-contained true -p:PublishTrimmed=true -p:PublishSingleFile=true -r ${{ matrix.rid }} ./src/Bicep.Cli/Bicep.Cli.csproj

オプションを合わせてコンパイルし直す。

.. code:: shell

    % dotnet publish -r linux-x64 -c Release --self-contained true /p:PublishTrimmed=true -p:PublishSingleFile=true -p:PublishReadyToRunShowWarnings=true
    % ls -lh ./bin/Release/netcoreapp3.1/linux-x64/publish/bicep -rwxr-xr-x 1 takekazu takekazu 54M 10月 17 17:41 ./bin/Release/netcoreapp3.1/linux-x64/publish/bicep

54MBになった。AOTは無くても良さそうなので外すことにする。また、VS Code Pluginはとりあえず、無くて良いので後で試す。

Modulesを試す
----------------

ドキュメントでは、このあたり `Modules <https://github.com/Azure/bicep/blob/main/docs/spec/modules.md>`_ に書いてある。

まずは使ってみる、モジュール利用のシナリオは色々あると思うが、今回は仮想マシンのデプロイをやって、ポイントを整理する。

仮想マシン（VM）をデプロイする場合、ポータルや `Azure Quickstart Template <https://github.com/Azure/azure-quickstart-templates>`_ を見ると、ほとんどの場合は仮想ネットワーク(VNet)とVMは固定の構成で作成されることが前提となっている。一方、実業務では既存のVNetに追加でVMをデプロイしたり、異なったVNetに同一構成のVMをデプロイすることが頻繁にある。実際、仮想マシンと仮想ネットワークのライフサイクルは別と考えた方が良く、このようなケースは、テンプレートのモジュール利用の典型的な例になる。

bicep で、vmとvnetをmoduleに分けてデプロイするレートを書いた例をレポジトリにあげた `bisep module examples <https://github.com/takekazuomi/bicep-module-examples>`_。

簡単にポイントをだけ説明する。

下記のようにメインのテンプレートを作成し、module を利用する。従来のARM Templateでは、テンプレート参照する場合は、URL経由である必要があったが、**bicep module** ではローカルファイルにモジュールを置くことができる。
また、**vnet: vnetMod.outputs.results.vnet** のように、モジュールの入力として他のモジュールの出力を使うことで、モジュール間の依存関係をもたせることができる。

.. code:: json

    param vmSize string
    param adminUsername string
    param adminPassword string {
        secure: true
    }

    module vnetMod './vnet.bicep' = {
        name: 'vnetMod'
        params: {
            vnetName: 'vNet'
        }
    }

    module vmMod './vm.bicep' = {
        name: 'vmMod'
        params: {
            vnet: vnetMod.outputs.results.vnet
            adminUsername: adminUsername
            adminPassword: adminPassword
            vmSize: vmSize
            vmName: 'vm1'
        }
    }

    output results object = {
        vnet: vnetMod
        vm: vmMod
    }

**module vnetMod './vnet.bicep' = {** と書くと、`vnet.bicep <https://github.com/takekazuomi/bicep-module-examples/blob/2a7749eb224e0aa3a0d1df8882251d27f85c2616/src/vnet.bicep>`_ が読み込まれる。下記は内容の抜粋。

.. code:: json

    param vnetName string = 'vNet'
    param addressPrefix string = '10.1.0.0/16'
    param location string = resourceGroup().location

    output results object = {
        vnet: vnet
    }

    ... snip ....

    // https://docs.microsoft.com/en-us/azure/templates/microsoft.network/virtualnetworks
    resource vnet 'Microsoft.Network/virtualNetworks@2020-05-01' = {
        name: vnetName
        location: location
        properties: {
            addressSpace: {
                addressPrefixes: [
                    addressPrefix
                ]
            }
            subnets: [
                subnet1
                subnet2
            ]
        }
    }

モジュールは、**Microsoft.Resources/deployments**  のインラインのテンプレートに展開される。該当部分、`main.json#L20-L104 <https://github.com/takekazuomi/bicep-module-examples/blob/2a7749eb224e0aa3a0d1df8882251d27f85c2616/src/main.json#L20-L104>`_。　以下抜粋

.. code:: json

 "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "vnetMod",

    ... snip ....

        "template": {

    ... snip ....

          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2020-05-01",
              "name": "[parameters('vnetName')]",
              "location": "[parameters('location')]",
              "properties": {
                "addressSpace": {
                  "addressPrefixes": [
                    "[parameters('addressPrefix')]"
                  ]
                },
                "subnets": [
                  "[variables('subnet1')]",
                  "[variables('subnet2')]"
                ]
              }
            }
          ],

   ... snip ....


**bicep** 全般の動きとして、ネイティブのARM Tempateとの関係は、ほぼ1:1で非常にシンプルな展開で、**module** でも同様な動きになっている。

ポイント１：依存関係
--------------------------------

vmは、vnetに依存している、これは、普通ARM Template では、ネストしたリソースで書くか、**dependsOn** で記述する。[#ref2]_ **bicep** には、自動依存性解決 [#ref3]_ の機能があり、**bicep resources 定義** 内で、別のリソースを参照すると、json生成時に、**dependsOn** を追加してくれる。

今回のケースだと、**vmMod** の **vnet** パラメータで、**vnetMod.outputs.results.vnet** を参照している。生成された **main.json** では、下記の `main.json#L329-L331 <https://github.com/takekazuomi/bicep-module-examples/blob/2a7749eb224e0aa3a0d1df8882251d27f85c2616/src/main.json#L329-L331>`_ 部分に依存関係は記述されているのがわかる。

.. code:: json

    "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'vnetMod')]"
    ]

単純に vnetModeのdeploymentsへに依存するように展開されてるので、大規模な展開で展開時間がセンシティブな場合は少々注意が必要だが殆どの場合は問題無い素直な変換になっている。

この依存関係の自動解決（暗黙の依存関係）は、コードをシンプルにするし、**dependsOn** の書き漏れが軽減されるので非常に気に入っている。

ポイント２：オブジェクトの利用
---------------------------------

従来からARM Templateではパラメータにオブジェクトを渡せたが、あまり便利では無かったので殆ど使っていなかった。このスクリプトでは、vnetもモジュールでは、vnet reference を返し。vm モジュールのパラメータに渡している。

`vnet.bicep#L5-L7 <https://github.com/takekazuomi/bicep-module-examples/blob/2a7749eb224e0aa3a0d1df8882251d27f85c2616/src/vnet.bicep#L5-L7>`_

.. code:: json

    output results object = {
        vnet: vnet
    }

**param vnet object** で受け取って、`vm.bicep#L25-L26 <https://github.com/takekazuomi/bicep-module-examples/blob/2a7749eb224e0aa3a0d1df8882251d27f85c2616/src/vm.bicep#L25-L26>`_ で使っている。ここでは、vnet name 使っていないが、vnetそのものが渡ってくるので他の操作もできる。あと、呼び出し側の **main.bicep** で、参照関係が生まれるので、自動依存関係で処理できるという利点もある。[#ref4]_

今の **bicep** だと、仕様のブレと未実装が混ざっていて少し混乱するが、そんな時はIssueを見れば良い。 [#ref5]_

まとめ
-------

**bicep** は、単純にARM Templateを各ツールとして捉えると今まであったどのツールより書きやすい。今回、module が実装されたことでかなり実用的に使えるようになった。この手のものを書くにはGUIツールより、テキストベースのツールが向いているように思う。ただ、ARM Template (= Azure Resource API) の難しさは残るのでハマる時はハマる。

bicepのリリースは来年になりそうだが、筋が良いので積極的に使って方が良いと思う、お勧めだ。ただ、copy が実装されいないので要注意、copy は、12月リリース予定の0.3でサポートされる予定だ。

あと、今回実行は基本WSL2内で行い、azコマンドのランナーとしては、昔ながらの **Makefile** を使っている。**Azure PowerShell Cmdlet** を使うなら、全部Poshスクリプトで書けば良いが、**az cli** を使う場合、コマンド間を繋ぐ何らかの **glue script** [#ref6]_ が必要だ。**bash** で全部書くのも辛いので、最近は、`Makefile <https://github.com/takekazuomi/bicep-module-examples/blob/2a7749eb224e0aa3a0d1df8882251d27f85c2616/src/Makefile>`_ を使うことにしている。GNU Make なんて、20年ぐらいまともに使ってなかったのでだいぶ忘れていたがだいぶ思い出してきてる。

2020/10/22 「GitHub Action の Workflow から持ってくると最新のビルドが拾えるよ」、って話が追記された。[#ref7]_

参照
------

.. [#ref1] `Module implementation (#608) <https://github.com/Azure/bicep/commit/23bd4cac508d0bc4e7f1b35ef74be9f519838207>`_
.. [#ref2] `Define the order for deploying resources in ARM templates <https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/define-resource-dependency>`_
.. [#ref3] `Implicit dependency <https://github.com/Azure/bicep/blob/main/docs/spec/resources.md#implicit-dependency>`_
.. [#ref4] このあたりコードでちょと変なことをしているのは、`Microsoft.Network virtualNetworks template reference <https://docs.microsoft.com/en-us/azure/templates/microsoft.network/virtualnetworkshttps://github.com/Azure/bicep/blob/>`_ によると、**name** 属性があるはずなのだが、参照すると実行エラーになってしま。仕方が無いので、id から **vnet name** を求めていてる
.. [#ref5] `自動依存関係解決だけあれば、module にdependsOn は不要じゃないかという議論 <https://github.com/Azure/bicep/issues/131#issuecomment-711103396>`_ どうやら、modeule に dependsOn 構文を追加するつもりらしい。これは、未確認
.. [#ref6] `Glue languages <https://en.wikipedia.org/wiki/Scripting_language#Glue_languages>`_ 、ぐぐったら、AWS Glue ばかりが出てきた心配になってのでリンクを張っておく。日本語のWikipediaはイマイチだったので、**en.wikipedia.org** にした
.. [#ref7] `Installing the "Nightly" build of bicep CLI and VS Code extension <https://github.com/Azure/bicep/blob/281cde1efe76e662947570e73986fe5419adc2d5/docs/installing-nightly.md>`_

.. author:: default
.. categories:: bicep, ARM template
.. tags:: none
.. comments::
