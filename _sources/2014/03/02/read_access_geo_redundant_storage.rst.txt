=========================================================
FiddlerCoreでRead-Access Geo Redundant Storage を検証する
=========================================================
`Windows Azure – 技術者でつなぐ日めくりカレンダー <http://www.windowsazure.com/ja-jp/community/calender/>`_ の 3/2 の記事です。先日、`Windows Azure 4周年記念 ＆ Japan DCオープンマジデシタ！JAZUG大会 <http://atnd.org/event/2014azurejpdc>`_ のLTで、Azure Storageには3つの可用性設定があるという話をしました。例によって、時間内には収まらず。「続きはWebで・・・」ということで続きです orz

まずはLTの内容の復習から、簡単にまとめると下記のような内容です。

振り返り
========

 | Azure Storageの可用性設定（冗長構成）には3種類ある。

1. ローカル冗長ストレージ (LRS=Locally Redundant Storage)
   データセンター内3箇所、同期

2. 地理冗長ストレージ (GRS=Geo Redundant Storage)
   地理的に離れた場所への複製（Local 3箇所＋リモート3箇所）、リモートは非同期、フェイルオーバー

3. 読み取りアクセス地理冗長ストレージ (RA-GRS=Read Access - Geo Redundant Storage)　PREVIEW
   地理的に離れた場所にあるデータを読む機能

読み取りアクセス地理冗長ストレージ (以下、RA-GRS）は、現状Previewなので、まずは `Windows Azure Preview <https://account.windowsazure.com/PreviewFeatures>`_  のページで申し込みをする必要がある。

SDKの対応状況
=============
RA-GRSの新機能を使うには REST version 2013-08-15 を使うStorage SDKが必要。ただし、RESTでEndpointが違うだけだから自前でもアクセスするだけならそんなに難しくない。

1. .NETだと、`Storage Client Library 3.0 <http://www.nuget.org/packages/WindowsAzure.Storage>`_ 以降
2. Javaだと、`Windows Azure Storage SDK for Java 0.5.0 <https://github.com/WindowsAzure/azure-storage-java>`_ 以降
3. その他、各自対応

上記2つのSDKには、Blobs, Tables and Queues の最終同期時刻（Last Sync Time）をクエリーする機能と primary にアクセしできなかった時に secondary に自動的に retry する機能、並びにLocationMode で参照先の設定がる。
リトライは、IRetryPolicyを拡張した IExtendedRetryPolicy が追加されている。これではリトライ時に参照先を切り替えするようになっている。

 | LTの資料

.. raw:: html

   <iframe src="http://www.slideshare.net/slideshow/embed_code/31655208?startSlide=2" width="597" height="486" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;"> </iframe>

`RA-GRS Windows Azure Storage LT <http://www.slideshare.net/takekazuomi/20140226-ragrs-windows-azure-storage-lt>`_


ここからが本題です。

確認する
========
RA-GRSで障害が起きた時の ``IExtendedRetryPolicy`` の動作確認をしたいのですが、そうは都合良くデータセンターの障害が起きるわけはありません。デバッガーでBreakしてネットワークを切断するとか、変数を書き換えるとかの方法もありますが、なんども繰り返すのは手間が掛かるしパターン増やすと面倒です。そんな時に、丁度いいタイミングで `CLR/H in Tokyo 第1回 <http://clr-h.jp/>`_  で過酷な争奪戦に勝利し「実践Fiddler」をゲットしました。

.. image:: http://www.oreilly.co.jp/books/images/picture_large978-4-87311-616-7.jpeg
   :target: http://www.amazon.co.jp/%E5%AE%9F%E8%B7%B5-Fiddler-Eric-Lawrence/dp/4873116163
   :alt: 実践 Fiddler Eric Lawrence　著、日本マイクロソフト株式会社 エバンジェリスト 物江 修 監訳、長尾 高弘 訳
   :align: center
   :width: 300px

FidderCoreを使うとHTTP通信の途中に割り込んで内容を変更することが簡単に出来ます。フルスクラッチでProxy書いて「ゴニョゴニョ」すると結構手間がかかるので、今回は、FeddlerCoreを使って サクッとLocationMode.PrimaryThenSecondary を指定した時のリトライ動作を確認します。
本にはいろいろ詳しく書いてあるので、興味が出た方は是非！

準備
====
下記の場所から、インストーラーを落としてきて入れます。exeが落ちてくるのでインストールすると、 `FiddlerCoreAPI` というディレクトリーに入ります。

http://www.telerik.com/fiddler/fiddlercore

.. image:: 2014-03-02-ragrs001.png

インストール先の `FiddlerCoreAPI\\DotNet4\\FiddlerCore4.dll` を参照に追加します。

.. image:: 2014-03-02-ragrs002.png



今回読み込みアクセスを試したいので、予めBlob にファイルを上げて起きます。

Blobからのダウンロードのコードは下記のような感じです。CloudBlobClient の LocationModeを設定しています。Client全体の設定はここで書き、ここのリクエストでは、BlobRequestOptionsで設定します。それ以外は普通のBlobからDownloadするコードですね。
try の次の行ので読んでいる、FiddlerCoreSetup()でFiddlerCoreの設定を行っています。

.. literalinclude:: Main.cs
   :language: c#


FiddlerCoreSetup() の中を見てみましょう。基本的には必要な処理をFiddlerのイベントハンドラに追加して、FidderCore プロキシを起動するだけです。

.. literalinclude:: FiddlerCoreSetup.cs
   :language: c#

ちょっと細かく追いかけてみます。

``AfterSessionComplete`` はHTTP セッションが完了した後に生成されるイベントです。 このイベントハンドラにロギング代わりにコンソールへの書き出しを追加します。。今回は、ここのログを見て何処にアクセスに行っているのかを確認します。

``BeforeRequest`` はHttp リクエストのデータが揃いサーバーに接続する前に生成されるイベントです。このイベントハンドラに、Primary のホストが接続先だったときに、存在しないhostに繋ぎに行くようなハンドラを追加します。

``FiddlerApplication.Startup()`` を呼び出して、FeddlerCoreプロキシインスタンスを起動します。ポートに0を指定すると、FeddlerCore が自動的に空いているポートを探してリスニングに入ってくれます。ポートが使用中の問題が発生しないので便利なので、ポート番号を固定したいとき以外は0で良いと思います。自動で割り当てられたポート番号は FiddlerApplication.oProxy.ListenPort で確認できます。

今回は、このアプリケーションから出るリクエストだけ操作できればいいので、 ``FiddlerCoreStartupFlags`` に ``ChainToUpstreamGateway`` を指定します。その他に、システム全体のProxyに入りたい場合は、 `RegisterAsSystemProxy` を使います。

そして、 `WebRequest` の `DefaultWebProxy` を、FeddlerCoreプロキシ で書き換えます。これで、Azure　Storage Client のリクエストが、Primary に向いているときは失敗するようになりました。

これで、実行すると下記のようになります。

.. literalinclude:: result.txt
   :language: text

最初に、Primary にアクセスし、その後 Secondary にアクセスし直しているのがわかります。

Primary へのアクセスが ``502 Bad Gateway`` なのはちょっとイマイチですが、FeddlerCoreがProxyで入るので仕方がないのかもしれません。

まとめ
======
実は、FeddlerCoreは、Azure Storage ClientのUnit Testでも使われています。 `GitHub azure-storage-net HttpMangler.cs <https://github.com/WindowsAzure/azure-storage-net/blob/master/Test/FaultInjection/HttpMangler/HttpMangler.cs>`_
今回は非常に簡単な例を紹介しましたが、FeddlerCoreを使うとレスポンスを偽装したり変更したりなど柔軟にできて、通常エラーにならないような場合のテストケースを作ることができます。手軽に使えるのでカジュアルに使っても便利ですし、がっちりUnitTestを作るときにも役に立ちます。

`CLR/H in Tokyo 第1回 <http://clr-h.jp/>`_ はいろいろ知らないことを聴けたので面白かったですね。特に、技術者のブランディング戦略の重要性と独自の進化を遂げたプロビジョニング、構成管理ツールの話が秀逸だった。

最後に１つだけ、FiddlerCore をnugetで配布してくれると嬉しいなぁ・・・


.. author:: default
.. categories:: Azure Storage, Azure
.. tags:: Azure Blob, Blob, Storage, How-to, Fiddler, Debug
.. comments::
