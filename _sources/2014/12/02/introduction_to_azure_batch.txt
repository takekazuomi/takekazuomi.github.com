=============================
 Introduction to Azure Batch
=============================

※本記事は、 `Azure Advent Calendar 2014 <http://qiita.com/advent-calendar/2014/azure>`_ への寄稿記事です。

最近あまりに Azure の新機能が続々と出てくるので、なかなかフォローが難しですが、そんな時は、 `No.1のBlog <https://buchizo.wordpress.com/>`_  と、 twitterで `#azurejp <https://twitter.com/hashtag/azurejp?src=hash>`_ を見ておけば良いですね。

そんな数ある今年のAzure新機能の中で、 `DocumentDB <http://azure.microsoft.com/en-us/services/documentdb/>`_  と、 `Batch <http://azure.microsoft.com/en-us/services/batch/>`_  の２つがお気に入りです。 ``DocumentDB`` については、過日仙台で話をしたので、その時の `資料 <http://www.slideshare.net/takekazuomi/introduction-to-documentdb>`_ を観てもらうことににして、今回は ``Azure Batch`` を紹介します。 公式名称は、 ``Batch`` ということなのですが、一般名称を製品名に使うのは紛らわしいので止めて欲しいですが、ここでは、それを曲げて、 ``Batch`` と書きます。

``Batch`` は、2014/10/28 に行われた TechEd Europe の Keynote でお披露目されました。その時の動画が公開されています。 開始から 1:11 ぐらいから ``Batch`` の紹介が始まって、1:15 から Mark Russinovich が `blender <http://www.blender.org/>`_  を使った3Dレンダリングを見せてくれます。そこだけなら、そんなに長くないしお勧めです。

.. image:: batch000.png
   :target: http://channel9.msdn.com/Events/TechEd/Europe/2014/KEY01
   :alt: TechEd Europe 2014 Keynote
   :align: center


.


Batch とは
==============
簡単に言うと、バッチ処理向けのPaaSです。WorkerRoleを使ってバッチ処理を組むのに比べると、ジョブ·キュー、スケジューラ、VMのプロビジョニングなどをアプリケーション側で用意する必要がありません。また既存のexeファイルをクラウド上で大量に実行することなどが容易に出来るようになっています。Microsoft内部では、Media Serviceが動画のエンコードの処理の部分で使っているそうです。 ``Batch`` のコンセプトと用語について説明します。


Azure Batch Account
-------------------
``Batch`` サービスを使うには、Bach アカウントが必要で、そのアカウントはポータルで作成します。アカウントを作成すると、サブスクリプション、リージョン、アカウント名とキーが確定します。アカウント名とキーはコードで利用します。

.. image:: batch001.png
   :alt: Azure Batch Account
   :align: center

SDK
---
``Bach`` では、低レベルのHTTP REST APIと、高レベルの Batch Apps を用意しています。現在のところ、 .NET 向け  `Batch Apps Cloud SDK <http://www.nuget.org/packages/Microsoft.Azure.Batch.Apps.Cloud/>`_  、 `Batch Apps Client SDK <http://www.nuget.org/packages/Microsoft.Azure.Batch.Apps/>`_ と、 `python 向け SDK <https://github.com/Azure/azure-batch-apps-python>`_ が用意されていて、 `Visual Studio 向けの extension <https://visualstudiogallery.msdn.microsoft.com/8b294850-a0a5-43b0-acde-57a07f17826a>`_  もあります。


Azure Batch REST API
--------------------
低レベルのHTTP REST API では、VM pool の管理、work item の実行を柔軟にコントロールすることができます。この方法では、あなたのリソースを完全に制御できますが、タスク実行パイプラインを管理するためにクライアントが必要です。


Azure Batch Apps
----------------
もう一つの高レベルの仕組みとして、 ``Batch Apps`` と呼ばれる機能が用意されています。この仕組みでは、バッチワークロードを登録し、クライアントあるいは、Batch Apps portal から実行することが出来るなどよりユーザーよりの管理機能を用意しています。

.. image:: batch004.png
   :alt: Azure Batch Apps portal
   :align: center


Pools
-----
バッチを実行する、ノードのグループです。Poolは、複数のVMで構成され、VMは、auto scaling rules で増減します。PoolへのVMの追加が必要な場合は、自動的に新規ノードが作成・追加されます。


Task Virtual Machines (TVMs)
----------------------------
TVMs は、Poolを構成する、compute nodeの１つです。 ``Batch`` 用に構成された Web/Worker Role と思ってください。scalable で stateless な仮想マシンとして利用できます。Poolに TVMs が追加される場合は、新規にクリーンな仮想マシンが用意されます。そのため、Poolの作成には少々時間がかかります。初期ノード数を指定して試してみたところ、1ノードで8分、100ノードぐらいの時間がかかりました。（Japan West、A1）

.. image:: batch006.png
   :alt: Pool and TVMs
   :align: center


Work Items
----------
``Work Items`` は、アプリケーションがプールでTVMs上で実行される方法を指定するテンプレートです。スケジューリングの設定（execute once とか 実行時間制限など）や、どの Pool でjobを実行するかなどを指定します。


Jobs
----
jobは、work item のスケジュールされたインスタンスで、一度だけ実行されたり、何度か実行されたりします。複数の task の集まりです。個々の task は、pool のどこかのTVM で実行されます。


Tasks
-----
task は、job の中の一つの実行ステップです。 work item, job, task の関係は、下記の図のようになります。

.. image:: batch005.png
   :alt: work item, job, task
   :align: center



Batch APIのサンプルコード
==========================
現時点では、 ``Batch`` のサンプルコードが6個 `コードレシピ <https://code.msdn.microsoft.com/site/search?f%5B0%5D.Type=Topic&f%5B0%5D.Value=Azure%20Batch&f%5B0%5D.Text=Azure%20Batch>`_ に上がっています。そのうち、 `Azure Batch Sample - Hello World <Batch AppsがBatch APIのサンプルで、 `Microsoft Azure Batch Apps Samples <https://code.msdn.microsoft.com/Azure-Batch-Apps-Samples-dd781172>`_ がBatch Apps のサンプルでした。

Batch APIのサンプルの `Hello World <https://code.msdn.microsoft.com/Azure-Batch-Apps-Samples-dd781172>`_ の方をざっと眺めます。

packages.config
---------------
まず、 `packages.config <https://code.msdn.microsoft.com/Azure-Batch-Sample-Hello-6573967c/sourcecode?fileId=127847&pathId=1932330368>` を眺めます。最近、サンプルコードや、他人のコードを見る時は、最初にpackages.configを見るようになりました。どんなライブラリを使ってるかを把握しておくと理解が速くなる気がしています。

`Azure.Batch <http://www.nuget.org/packages/Azure.Batch/>`_ を使っています。APIリファレンスは、 `Batch <http://msdn.microsoft.com/en-us/library/azure/dn820177.aspx>`_ にあります。

設定
----
試しに動かして見ようとするならば、 BatchとStorageのアカウントが必要です。 これらを作成したら、Program.csに書き込みます。変更するのは、赤線部分、blobのendpoint、batchのアカウント、キー、ストレージのアカウント、キーの5箇所です。

.. image:: batch007.png
   :alt: hello world setting
   :align: center

実行
----
VSでビルドして実行すると下記のような感じで動きます。このサンプルを動かすだけならば、VS extension は必要ありません。

.. image:: batch008.png
   :alt: hello world exec
   :align: center

1. BatchClient
--------------
Batch アカウント、キーから、BatchCredentialsを作成して、BatchClient.Connect で BatchClientを取得します。

.. literalinclude:: batchhello001.cs
   :language: csharp


2. Pool
-------
Poolを用意しますが、もしあれば使います。Poolは、PoolManager経由で操作します。Pool 名はBatch アカウント内でユニークな名前で無ければいけません。
Pool作成時に、VMのサイズやOSを指定します。

.. literalinclude:: batchhello002.cs
   :language: csharp

3. work item
------------
ここはちょっと分かり辛い。CloudTask がTaskで、
次に、Work Itemを定義します。 client.OpenWorkItemManager で、WorkItemManager を取得して。TaskSubmissionHelper を使って、複数のタスクを追加していきます。
最後に、 TaskSubmissionHelper.Commitで、Work Itemが発行されJobとしてインスタンス化されます。
WorkItemManager.GetJobでJobは取得できます。
Jobの実行状況は、TaskStateMonitor で確認することができます。このコードでは、TaskStateMonitor.WaitAll() で全てのjobの完了を待っています。

.. literalinclude:: batchhello003.cs
   :language: csharp

4. 結果の取得
-------------
完了後のJobを、CloudJob.ListTasks()して、個々のTaskの実行結果を拾うことができます。このコードでは、 GetTaskFile(Constants.StandardOutFileName) して標準出力を拾っています。

終わり
------
最後に、work item を消したり、BatchClientをdisposeしたりなどの後処理をします。基本的な流れは割りとシンプルだと思います。Batch Appsを使うと、予めクラウド側にアプリを登録して置いて、ポータルから実行したり、モニターもポータル経由で出来たりなど諸々便利機能が使えます。その分ちょっと面倒になる部分もありますが、VS extension がその辺りのデバッグなどを支援してくれるようです。

最後に
======
``Batch`` は、非常に定型的なコードで、ラージスケールなバッチ処理を実行できる面白い仕組みになっています。Azureの諸々の仕組みと上手く組み合わって、簡単なことならHadoop よりシンプルに同じようなことが実現できると言えそうです。ただ、ちょっとWork Item周りの処理が分かり辛く残念です。わりと簡単に使えるし、日本のデータセンターにも来ているので、興味があれば使ってみれば、良いのではないでしょうか。

この前Blogを書いてからだいぶ時間が空いてしました。今年はJAZUG でやっている `CDP勉強会 <http://jazug.doorkeeper.jp/events/17739>`_ が次回第五回で延べ400人ほどの参加になりそうな勢い、 `slideshareの資料 <http://www.slideshare.net/takekazuomi/presentations>`_ は累積で7万PVを超える勢いで、Microsoft Azure の熱を肌に感じる１年でした。（slideshare のPVは2014/1/1 時点で5千ほどだったので急激に増えました）


GoAzure 2015
============
.. image:: batch009.png
   :alt: GoAzure
   :align: center

あの Scott Hanselman が来る！ ～ GoAzure が 1/16 に開催～ の `GoAzure <http://r.jazug.jp/#event>`_ で、Storage周りの話しをします（予定） `Persistence on Azure - Microsoft Azure における永続化 <http://r.jazug.jp/goazure-sessions.html>`_ お待ちしてます。





.. author:: Takekazu Omi
.. categories:: Azure, Batch
.. tags:: Batch, Cloud, Intro, GoAzure
.. comments::
