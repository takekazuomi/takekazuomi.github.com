=============================
Azure Storage Gen 2は速かった
=============================
今年も早いもので、あっという間に12月になりました。個人的なAzure今年の目玉は、Azure Storageのパフォーマンスの向上(Gen2)と新しくなったWindows Azure Storage 2.0です。

IaaS、Web Site、Mobile Service、Media Serviceなど新機能満載なAzureですが、目立たないところで地味にストレージ関連は改善されています。ストレージはクラウドの足回りなので重要です。

* 元記事は、Windows Azure Advent Calendar 2012 2日目として書きました。`Windows Azure Advent Calendar jp: 2012 <http://atnd.org/events/34353>`_

.. image:: http://farm9.staticflickr.com/8484/8217239370_f6ebb8d21d_z.jpg
    :target: http://www.flickr.com/photos/takekazuomi/8217239370/
    :alt: omikuji by takekazu, on Flickr

----

Azure Storageのパフォーマンスの向上
===================================
2012/6/7 以降に作成されたストレージアカウントで、下記のようにパフォーマンスターゲットが引き上げられました。Gen 2と呼ばれているようです。以前のもの（Gen1）に比べ秒間のトランザクションベースだと4倍程度になっています（Azure Table 1Kエンティティの場合）

詳しくはリンク先を見てもらうとして下記の4点が注目です。

1. ストレージ ノード 間のネットワーク速度が1Gbpsから10Gbpsに向上
2. ジャーナリングに使われるストレージデバイスがHDDからSSDに改善
3. 単一パーテーション  500 エンティティ/秒 ->   2,000 エンティティ/秒 (15Mbps)
4. 複数パーテーション 5,000 エンティティ/秒 -> 20,000 エンティティ/秒 (156Mbps)

参照：`Windows Azureのフラット ネットワーク ストレージと2012年版スケーラビリティ ターゲット <http://satonaoki.wordpress.com/2012/11/03/windows-azure%E3%81%AE%E3%83%95%E3%83%A9%E3%83%83%E3%83%88-%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF-%E3%82%B9%E3%83%88%E3%83%AC%E3%83%BC%E3%82%B8%E3%81%A82012%E5%B9%B4%E7%89%88%E3%82%B9/>`_

----

確認しよう
==========
ではどれだけ速くなったのか確認しましょう。なるべく実利用環境に近いようにということでC#を使います。ライブライは、最近出たばかりですが、Azure Storage Client 2.0を使います。このライブラリのコードをざっと見た感じだと、従来のコードに比べてシンプルになって読みやすく速度も期待できそうです。

比較的限界が低い単一パーテーションで確認します。前記のGen2の記事には、エンティティが1KByteで、単一パーテーションの場合、2,000 エンティティ/秒というパフォーマンスターゲットが記述されています。これを確認しようとするとAzure外部からのネットワークアクセスだと厳しいのでWorkerRoleを立てて、リモートデスクトップでログインしてプログラムを実行します。プログラムは秒間2000オブジェクトを計測時間の間は作りづけないといけないのでCPUやGCがボトルネックになるかもしれません、今回はLargeのインスタンスを使うことにしました。

Largeだとメモリ7GByte、coreが8つ、ネットワーク400Mbpsというスペックなので気にしなくても良いかと思ったのですが、GCをなるべく減らすためにエンティティのデータ部分をCache（共有）します。1KByteぐらいだとあまり効果が無いかもしれませんが。

.. gist:: https://gist.github.com/takekazuomi/4238298

さらに、Threadを上げる数を減らして並列性を上げるために非同期呼び出しを使います。.NET 4.5 から await/async が使えるので割合簡単に非同期コードが記述できるのですが、少し手間がかかりました。

なんと残念ながら、Windows Azure Storage 2.0になっても APM (Asynchronous Programming Model) のメソッドしか用意されておらず、 await で使えるTaskAsyncの形式がサポートされていません。仕方がないので、自分で拡張メソッドを書きますが、引数が多くて intellisense があっても混乱します。泣く泣く、コンパイルエラーで期待されているシグニチャーをみながら書きました。コードとしてはこんな感じで簡単です。

.. gist:: https://gist.github.com/takekazuomi/4238639

この辺りは、下記のサイトが詳しくお勧めです。

参照：`++C++; // 未確認飛行C 非同期処理 <http://ufcpp.net/study/csharp/sp5_async.html#async>`_

.. _waac2012day2-pending:

非同期で同時接続数が上がらない？
---------------------------------
このコードを動かしてみたら、「単一スレッド＋非同期の組み合わせだと、おおよそ２から３程度のコネクションしか作成されない」ことに気が付きました。場合によっては、5ぐらいまで上がることもあるようですが、どうしてこうなるのか不思議です。

#### ** これは、Azure Storage Client 2.0のBUG ** だったようです。2.0.2で修正されています。`WindowsAzure/azure-sdk-for-net Issue #141 <https://github.com/WindowsAzure/azure-sdk-for-net/pull/134>`_

** [2012/12/26 このFIXに関するまとめを書きました](/blog/2012/12/26/asc2-dot-0asyncbug/) **

非同期でガンガンリクエストが飛ぶのかと思ったのですが、それほどでもなかったので、今回のコードは複数スレッド（Task）をあげて、それぞれのスレッド内で非同期呼び出しを使って処理を行うようになっています。Taskの起動には、Parallel.ForEach を使っています。

さらに、上限に挑戦するためにEntity Group Transactionを使います。TableBatchOperation のインスタンスを作って操作を追加していってCloudTableのExecuteBatchAsync()で実行します。この辺りは以前の使い方とだいぶ違っています。
今回は時間を測っているだけですが、resultにはEntityのリストが帰ってきて、それぞれにtimestampとetagがセットされています。

.. gist:: https://gist.github.com/takekazuomi/4238661

---

結果
====
いくつかパラメータを調整して実行し、スロットリングが起きる前後を探して4回測定しました。ピークe/sは、もっとも時間当たりのエンティティの挿入数が大きかった時の数字で秒間のエンティティ挿入数を表しています。
単一プロセスでスレッドを増やしていく方法では頭打ちになってしまうので、複数のプロセスを起動して測定ています。（このあたりも少しオカシイです）
下記の表の最初のカラムは起動するプロセス数です。

失敗が無かったケースで6,684、 6,932 エンティティ/秒で処理できており、Gen2で挙げられているパフォーマンスターゲットは十分達成できているようです。

測定時間の、Table Metricsを見るとThrottlingErrorと同時に、ClientTimeoutErrorも出ているのでプロセスを3つ上げているケースではクライアント側でサーバからの戻りが受けきれずにエラーになっている場合も含まれているようです。

.. csv-table:: 表1 条件：エンティティサイズ 1KByte、単一パーテーション、スレッド数12、バッチサイズ100
   :header: プロセス数,最少,中央値,平均,最大,90%点,95%点,99%点,ピークe/s,成功数,失敗数
   :widths: 10,10,10,10,10,10,10,10,10,10,10

	    2,97.27,166.6,258,"14,800",359.578,472.373,"1,106.28","6,684","40,000",0
	    2,94.17,260.5,333.7,"5,320",564.774,723.272,"1,339.03","6,932","40,000",0
	    3,90.13,174.8,734.1,"21,270","1,621.49","1,845.90","3,434.26","7,218","59,377",623
	    3,90.35,341.6,610.1,"27,490","1,064.59","1,380.42","4,431.79","8,005","59,740",260

-------

最後に
=======
今回、第一世代（Gen 1）の単一パーテーションで500 エンティティ/秒というパフォーマンスターゲットに比べ10倍近いパフォーマンスを出しているのが測定できました。測定時間が短かったので、継続してこのパフォーマンスがでるのかどうかなど検証の余地はありますが、劇的に向上していると言えます。
`takekazuomi/WAAC201202のレポジトリ <https://github.com/takekazuomi/WAAC201202>`_ に計測に使ったコードをいれてあります。

12/2の担当でしたが、JSTでは日付も変わってだいぶ遅くなってしました。データの解析に最近お気に入りの（慣れない）「R」を使ったのですが、いろいろ手間取ってしまいました。最初はRで出した図なども入れたいと思ったのですが、軸や凡例の設定がうまくできずに時間切れで断念です。

レポジトリには、なんかずいぶん古い履歴まで上がってしましたが、手元のコードを使いまわしたら出てしまいました。スルーでお願いします。

-------

おまけ
=======
数時間振り回してみると、エンティティ/秒の中央値は2000から3000エンティティ/秒程度になりそうです。負荷がかかり始めると、Gen １ではスロットリングをかけてエラーにしてしまうという動きでしたが、Gen 2 ではスロットリングを随時掛けつつ2000から3000エンティティ/秒程度に絞っていくという動きになったようです。
`

.. author:: default
.. categories:: Azure Table, Azure
.. tags:: C#, Azure Table, Async, Cloud, NoSQL, Storage, Table
.. comments::


