PsEnv への TabExpansion の実装
==============================
git-poshのコードを見ていたら、PowerShell 3.0 から導入された TabExtentionを使ってタブ補完を実装していた。 [#r1]_ 仕組みはシンプルで便利な機能だったので、いつも使っているPsEnv [#r2]_ に実装してみた。 [#3]_ 簡単なコードだが知らないテクニックが使われていて面白かったので軽く紹介。


.. image:: https://c1.staticflickr.com/1/257/17899235534_5062afb52c_c.jpg
   :target: https://flic.kr/p/tgGg8d
   :alt: Piccolo
   :align: center


TabExtentionの基本
==================
「コマンドラインで、タブを押したときに Function:TabExtention が呼ばれ、コマンドラインと最後のワードが渡される、TabExtention の関数で文字列の配列を返すとコマンドラインでは補完文字列として扱われる」

基本、これだけなので、非常にシンプルでわかり易い。 [#4]_  git-poshのコードを見ながら実装してみたら、こんな感じになった。

.. gist:: https://gist.github.com/takekazuomi/c601e9ff055c83652269d65cdd0b3140


コード解説
==========

`L33 <https://gist.github.com/takekazuomi/c601e9ff055c83652269d65cdd0b3140#file-psenvtabexpansion-ps1-L33>`_ で現在のTabExpansionの関数をリネームして保存しておく、補完処理が自分と関係無い場合は、このコードにフォールバックする。（関数名を変更できるのは知らなかった）コールバックチェーンの実装方法の一つらしい。TabExpansion は、Globalな名前空間にExportされてるが、TabExpansionBackup はExportされておらず、名前が衝突する心配は無い。タブが押されると、 `L37 TabExpansion <https://gist.github.com/takekazuomi/c601e9ff055c83652269d65cdd0b3140#file-psenvtabexpansion-ps1-L37>`_ 関数が呼ばれる。正規表現で引っ掛けて、補完処理対象のコマンドラインなら  `PsEnvTabExpansion`  へ、その他は `TabExpansionBackup` へフォールバックする。

`L19 PsEnvTabExpansion <https://gist.github.com/takekazuomi/c601e9ff055c83652269d65cdd0b3140#file-psenvtabexpansion-ps1-L19>`_ は、コマンドラインのラストブロックを貰って、正規表現で引っ掛けて対象の補完文字列を返す。switch と正規表現を使うとスッキリ書けて気持ちいい。

DynamicParamとの比較
====================
TabExtention では、仕組みがコマンドライン文字列のパターンマッチングなので PowerShell Cmdlet 以外のWin32 EXE などの補完も実装できる。PsEnvはCmdletなので、DynamicParamでも良かったかなという気もするが、実装を比べると.NETのクラス出まくりのDynamicParamに比べTabExtentionは綺麗に書ける。しかし、TabExpansion はGlobalなキー入力をフックするので下手に作るとキー入力のレスポンスが悪くなるという欠点がある。どっちも、デバックし辛いのは欠点。

PsEvnの紹介
===========
あまり知られていない気がするので、 `PsEnv <https://github.com/DuFace/PsEnv>`_ の紹介を簡単に書いておく。Windowsでは環境変数の取り合いになって、うまく共存できない環境がママある。linuxや、Macだと、rubyや、pythonの仮想的に切り替える仕組みだけで足りたりするのだが、Windowsだと駄目だったり。cygwin, msys さらにそのバージョン違いでコンパイルされていたりして混ざって動かなくなったりすることがある。そのため、標準の環境変数はなるべくクリーンにしておいて環境によって必要な環境変数を設定するようにしている。PsEnvは環境変数を設定するのに便利なCmdletだ。

使い方は、`PsEnv <https://github.com/DuFace/PsEnv>`_ を見てもらうとして、使ってる設定ファイル `psenv.json <https://gist.github.com/takekazuomi/b6d8fd537e1a16adc62884b2f84d5e38>`_ を参考までに上げておく。ゴミが多くて少々長い申し訳無い。

最後に
======
これを書いている途中で、TabExtention++ が、PSReadlineと同時に WMF5の標準機能として取り込まれている [#r5]_ のを知った。共存しても問題無いのだろうか。このあたり [#r5]_  には、PowerTab（？）対応のコードが入ってるので余計気になる。


参考
====
.. [#r1] `posh-git/src/GitTabExpansion.ps1 <https://github.com/dahlbyk/posh-git/blob/master/src/GitTabExpansion.ps1>`_
.. [#r2] `PsEnv A simple PowerShell module that allows specific tools to be added to the current environment by updating environment variables from a JSON file. <http://winscript.jp/powershell/312>`_
.. [#r3] `Tab completion support of Use and Use-Tool options.  <https://github.com/DuFace/PsEnv/pull/2>`_
.. [#r4] 公式ドキュメントが見つけられないかった。参考 `Document TabExpansion and ArgumentCompleter #747 <https://github.com/PowerShell/PowerShell-Docs/issues/747>`_
.. [#r5] `第6回 PowerShell 勉強会「PowerShell 5.0 新機能と関連OSSのご紹介」資料公開 <http://winscript.jp/powershell/312>`_
.. [#r6] `PowerTab対策コード <https://github.com/dahlbyk/posh-git/blob/master/src/GitTabExpansion.ps1#L377>`_


.. author:: default
.. categories:: posh
.. tags:: none
.. comments::
